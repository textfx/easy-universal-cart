import React from 'react';
import ReactDOM from 'react-dom';
import App from './examples/app.js'
/*whyDidYouRender = true*/

if (process.env.NODE_ENV !== 'production') {
    const whyDidYouRender = require('@welldone-software/why-did-you-render');
    whyDidYouRender(React);
}

ReactDOM.render(
        <App />, document.getElementById('root'));















/*
Концепции которые пока не проверены, но в теории возможны (мысли в слух, что бы не забыть).
1. Использовать cartReducer для реализации избранного. Тот же принцип, добавить товар, удалить товар, просто нужно переменные к товару добавить {"Хочу в подарок", "Планирую купить"}, или что там в избранном обычно делают.
   проблема в одинаковом названии actions....
2. Использовать всю корзину как Lading Page которая будет частично перерисовыватся при каждом обновлении state
3. Можно  делать корзину в корзине. Допустим есть товар пицца на выбор, {id: "1", name:"My pizza"  filling:[{id:"tomato"}, {id:"cheese"}]}
    Делаем функцию onClick = (idPizza, filling, action={type:"CART_INC",  item:{id:"tomato", count:1}})=> {
         // fillingможно не передавать, получить через cart.get(1).filling
         const state = cartReducer(filling, action);
         cart.set({id:idPizza, filling:state});
    }
    В рендере получится что то вроде:
    Pizza 1
        tomato  - 1 +
        cheese  - 2 +
    Pizza 2
        tomato  - 1 +
        cheese  - 2 +
    Конечно добавить изображение, количество грамм еды, проще простого, всего лишь свойства в объекте.
    Минусы, придётся править cart-driver, так как сейчас он рассчитан на работу только в одном экземпляре. Но для подсчёта суммы вложенных корзин, нужны будут его методы, а так же вероятно править методы getInput and getAjax
    Потому 3 варианта:
        1. Делать полностью отдельный драйвер для вложенных корзин.
        2. Разбить драйвер на составные части, с которых можно собрать и текущей, и драйвер для вложенных корзин.
        3. Добавить функционала в текущий, который будет уметь работать с вложенностями, или хотя бы больше чем в 1 экземпляре. Допустим создать boolean  в конструкторе, если указан, то не будет реализовывать работу с локал сторедж
3-b. Другой вариант, сделать иллюзию вложенных корзин. При визуализации, отображать
    Pizza 1
        tomato  - 1 +
        cheese  - 2 +
    Pizza 2
        tomato  - 1 +
        cheese  - 2 +
    Но по факту это будут всё новые товары,
      Pizza 1
      tomato  - 1 +
      cheese  - 2 +
      Pizza 2
      tomato  - 1 +
      cheese  - 2 +
    Всё равно придётся сделать делать уникальные id: Pizza_1_tomato. И потом обработчик делать, что бы при удалении Pizza удалялись и связанные овощи.
    Как вариант, брать из localstorage переменную cart и делать функцию удаления связанных овощей, после применить весь cart.setState(mystate); Учитывая что пицц заказывают 1-2. И всего позиций 20 макс будет. Даже если 100 будет, подобная перезапись всей корзины не вызовет не малейших проблем.

В общем главное помнить, что благодаря свободы передаваемых переменных и их последующей обработки, можно создать любой нужный функционал, часто с минимальными усилиями, при достаточной доли креативности.
*/

